// Ïä§ÎÉÖÏÉ∑ ÏÉÅÏÑ∏ ÌôïÏù∏
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function detailedSnapshotCheck() {
  console.log('üìä Ïä§ÎÉÖÏÉ∑ ÏÉÅÏÑ∏ Î∂ÑÏÑù\n');

  try {
    // Î™®Îì† Ïä§ÎÉÖÏÉ∑ Ï°∞Ìöå
    const { data: snapshots, error } = await supabase
      .from('monthly_snapshots')
      .select('*')
      .order('snapshot_date', { ascending: false });

    if (error) {
      console.error('‚ùå Ï°∞Ìöå Ïã§Ìå®:', error.message);
      return;
    }

    if (!snapshots || snapshots.length === 0) {
      console.log('‚ö†Ô∏è  Ï†ÄÏû•Îêú Ïä§ÎÉÖÏÉ∑Ïù¥ ÏóÜÏäµÎãàÎã§.\n');

      // dashboard_data ÌôïÏù∏
      console.log('üìã ÌòÑÏû¨ dashboard_data ÌôïÏù∏ Ï§ë...\n');
      const { data: current, error: currentError } = await supabase
        .from('dashboard_data')
        .select('*')
        .eq('id', 'default')
        .single();

      if (!currentError && current) {
        console.log('‚úÖ ÌòÑÏû¨ dashboard_data:');
        console.log(`   ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÍ∞Ñ: ${current.updated_at}`);
        if (current.data) {
          analyzeData('ÌòÑÏû¨ Îç∞Ïù¥ÌÑ∞', current.data, current.updated_at);
        }
      }
      return;
    }

    console.log(`‚úÖ ${snapshots.length}Í∞úÏùò Ïä§ÎÉÖÏÉ∑ Î∞úÍ≤¨!\n`);
    console.log('=' .repeat(80));

    snapshots.forEach((snapshot, index) => {
      console.log(`\nüì∏ Ïä§ÎÉÖÏÉ∑ #${index + 1}`);
      console.log(`   ID: ${snapshot.id}`);
      console.log(`   ÏÉùÏÑ±Ïùº: ${snapshot.snapshot_date}`);
      console.log(`   Ïó∞Ïõî: ${snapshot.year}-${String(snapshot.month).padStart(2, '0')}`);

      if (snapshot.data) {
        analyzeData(`Ïä§ÎÉÖÏÉ∑ #${index + 1}`, snapshot.data, snapshot.snapshot_date);
      }
      console.log('=' .repeat(80));
    });

  } catch (e) {
    console.error('‚ùå ÏòàÏô∏ Î∞úÏÉù:', e.message);
  }
}

function analyzeData(label, data, timestamp) {
  console.log(`\n   üí∞ Îß§Ï∂ú Ï†ïÎ≥¥:`);
  console.log(`      Î™©Ìëú Îß§Ï∂ú: ${(data.targetRevenue || 0).toLocaleString()}Ïõê`);

  // AE Î¶¨Ìè¨Ìä∏ Î∂ÑÏÑù
  if (data.aeData) {
    console.log(`\n   üë• AE Î¶¨Ìè¨Ìä∏ (Ï¥ù ${data.aeData.length}Î™Ö):`);
    const aeWithReports = data.aeData.filter(ae => ae.weeklyReports && ae.weeklyReports.length > 0);
    console.log(`      Î¶¨Ìè¨Ìä∏ Ï†úÏ∂ú: ${aeWithReports.length}Î™Ö`);

    aeWithReports.forEach(ae => {
      console.log(`\n      üìã ${ae.name}:`);
      console.log(`         Î¶¨Ìè¨Ìä∏ Ïàò: ${ae.weeklyReports.length}Í∞ú`);

      ae.weeklyReports.forEach((report, idx) => {
        console.log(`         \n         Î¶¨Ìè¨Ìä∏ #${idx + 1}:`);
        console.log(`           Ï£ºÏ∞®: ${report.week}`);
        console.log(`           ÎÇ†Ïßú: ${report.reportDate || 'Í∏∞Î°ù ÏóÜÏùå'}`);

        if (report.byChannel) {
          const totalClients = report.byChannel.reduce((sum, ch) => sum + (ch.totalClients || 0), 0);
          const renewalRevenue = report.byChannel.reduce((sum, ch) => sum + (ch.renewalRevenue || 0), 0);
          console.log(`           Ï¥ù Îã¥Îãπ: ${totalClients}Í∞ú`);
          console.log(`           Ïó∞Ïû• Îß§Ï∂ú: ${renewalRevenue.toLocaleString()}Ïõê`);

          // Îß§Ï≤¥Î≥Ñ ÏÉÅÏÑ∏
          const nonZeroChannels = report.byChannel.filter(ch =>
            (ch.totalClients || 0) > 0 ||
            (ch.renewalRevenue || 0) > 0 ||
            (ch.expiringClients || 0) > 0 ||
            (ch.renewedClients || 0) > 0
          );

          if (nonZeroChannels.length > 0) {
            console.log(`           Îß§Ï≤¥Î≥Ñ Îç∞Ïù¥ÌÑ∞:`);
            nonZeroChannels.forEach(ch => {
              console.log(`             - ${ch.channel}: Îã¥Îãπ ${ch.totalClients || 0}, Ï¢ÖÎ£å ${ch.expiringClients || 0}, Ïó∞Ïû• ${ch.renewedClients || 0}, Îß§Ï∂ú ${(ch.renewalRevenue || 0).toLocaleString()}Ïõê`);
            });
          }
        }
      });
    });
  }

  // ÏòÅÏóÖÏÇ¨Ïõê Î¶¨Ìè¨Ìä∏ Î∂ÑÏÑù
  if (data.salesData) {
    console.log(`\n   üíº ÏòÅÏóÖÏÇ¨Ïõê Î¶¨Ìè¨Ìä∏ (Ï¥ù ${data.salesData.length}Î™Ö):`);
    const salesWithReports = data.salesData.filter(s => s.weeklyReports && s.weeklyReports.length > 0);
    console.log(`      Î¶¨Ìè¨Ìä∏ Ï†úÏ∂ú: ${salesWithReports.length}Î™Ö`);

    salesWithReports.forEach(sales => {
      console.log(`\n      üìã ${sales.name}:`);
      console.log(`         Î¶¨Ìè¨Ìä∏ Ïàò: ${sales.weeklyReports.length}Í∞ú`);

      sales.weeklyReports.forEach((report, idx) => {
        console.log(`         \n         Î¶¨Ìè¨Ìä∏ #${idx + 1}:`);
        console.log(`           Ï£ºÏ∞®: ${report.week}`);
        console.log(`           ÎÇ†Ïßú: ${report.reportDate || 'Í∏∞Î°ù ÏóÜÏùå'}`);

        if (report.byChannel) {
          const totalClients = report.byChannel.reduce((sum, ch) => sum + (ch.newClients || 0), 0);
          const totalRevenue = report.byChannel.reduce((sum, ch) => sum + (ch.newRevenue || 0), 0);
          console.log(`           Ïã†Í∑ú Í≥ÑÏïΩ: ${totalClients}Í∞ú`);
          console.log(`           Ïã†Í∑ú Îß§Ï∂ú: ${totalRevenue.toLocaleString()}Ïõê`);

          // Îß§Ï≤¥Î≥Ñ ÏÉÅÏÑ∏
          const nonZeroChannels = report.byChannel.filter(ch =>
            (ch.newClients || 0) > 0 || (ch.newRevenue || 0) > 0
          );

          if (nonZeroChannels.length > 0) {
            console.log(`           Îß§Ï≤¥Î≥Ñ Îç∞Ïù¥ÌÑ∞:`);
            nonZeroChannels.forEach(ch => {
              console.log(`             - ${ch.channel}: Í≥ÑÏïΩ ${ch.newClients || 0}, Îß§Ï∂ú ${(ch.newRevenue || 0).toLocaleString()}Ïõê`);
            });
          }
        }
      });
    });
  }
}

detailedSnapshotCheck();
